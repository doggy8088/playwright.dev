- `base_url` [str] *(optional)*<a aria-hidden="true" tabIndex="-1" class="list-anchor-link" id="api-request-new-context-option-base-url"/><a href="#api-request-new-context-option-base-url" class="list-anchor">#</a>
  
  像 [api_request_context.get()](/api/class-apirequestcontext.mdx#api-request-context-get) 這樣的方法會考慮基礎 URL，使用 [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) 建構對應的 URL。範例:
  * baseURL: `http://localhost:3000` 並發送請求到 `/bar.html` 結果是 `http://localhost:3000/bar.html`
  * baseURL: `http://localhost:3000/foo/` 並發送請求到 `./bar.html` 結果是 `http://localhost:3000/foo/bar.html`
  * baseURL: `http://localhost:3000/foo` (沒有結尾斜線) 並導航到 `./bar.html` 結果是 `http://localhost:3000/bar.html`
- `client_certificates` [List]\[[Dict]\] *(optional)* <font size="2">新增於: 1.46</font><a aria-hidden="true" tabIndex="-1" class="list-anchor-link" id="api-request-new-context-option-client-certificates"/><a href="#api-request-new-context-option-client-certificates" class="list-anchor">#</a>
  - `origin` [str]
    
    憑證有效的確切來源。來源包括 `https` 協議、主機名和可選的端口。
  - `certPath` [Union]\[[str], [pathlib.Path]\] *(optional)*
    
    憑證文件的 PEM 格式路徑。
  - `cert` [bytes] *(optional)*
    
    PEM 格式的憑證直接值。
  - `keyPath` [Union]\[[str], [pathlib.Path]\] *(optional)*
    
    私鑰文件的 PEM 格式路徑。
  - `key` [bytes] *(optional)*
    
    PEM 格式的私鑰直接值。
  - `pfxPath` [Union]\[[str], [pathlib.Path]\] *(optional)*
    
    PFX 或 PKCS12 編碼的私鑰和憑證鏈的路徑。
  - `pfx` [bytes] *(optional)*
    
    PFX 或 PKCS12 編碼的私鑰和憑證鏈的直接值。
  - `passphrase` [str] *(optional)*
    
    私鑰的密碼 (PEM 或 PFX)。
  
  TLS 客戶端認證允許伺服器請求並驗證客戶端憑證。
  
  **詳細資訊**
  
  要使用的客戶端憑證數組。每個憑證物件必須具有 `certPath` 和 `keyPath`，單個 `pfxPath`，或其對應的直接值 (`cert` 和 `key`，或 `pfx`)。如果憑證已加密，應提供 `passphrase` 屬性。應提供 `origin` 屬性，與憑證有效的請求來源完全匹配。
  
  :::note
  不支援將客戶端憑證與代理伺服器結合使用。
  :::
  
  :::note
  在 macOS 上使用 WebKit 時，訪問 `localhost` 不會拾取客戶端憑證。您可以通過將 `localhost` 替換為 `local.playwright` 來使其工作。
  :::
  
- `extra_http_headers` [Dict]\[[str], [str]\] *(optional)*<a aria-hidden="true" tabIndex="-1" class="list-anchor-link" id="api-request-new-context-option-extra-http-headers"/><a href="#api-request-new-context-option-extra-http-headers" class="list-anchor">#</a>
  
  包含每個請求要發送的額外 HTTP 標頭的物件。預設為無。
- `http_credentials` [Dict] *(optional)*<a aria-hidden="true" tabIndex="-1" class="list-anchor-link" id="api-request-new-context-option-http-credentials"/><a href="#api-request-new-context-option-http-credentials" class="list-anchor">#</a>
  - `username` [str]
    
    
  - `password` [str]
    
    
  - `origin` [str] *(optional)*
    
    限制在特定來源 (scheme://host:port) 發送 http 憑證。
  - `send` "unauthorized" | "always" *(optional)*
    
    此選項僅適用於從相應 [APIRequestContext] 發送的請求，不影響從瀏覽器發送的請求。`'always'` - 每個 API 請求都會發送帶有基本身份驗證憑證的 `Authorization` 標頭。`'unauthorized` - 僅在收到帶有 `WWW-Authenticate` 標頭的 401 (未授權) 回應時發送憑證。預設為 `'unauthorized'`。
  
  [HTTP 認證](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication) 的憑證。如果未指定來源，則用戶名和密碼會在未授權回應時發送到任何伺服器。
- `ignore_https_errors` [bool] *(optional)*<a aria-hidden="true" tabIndex="-1" class="list-anchor-link" id="api-request-new-context-option-ignore-https-errors"/><a href="#api-request-new-context-option-ignore-https-errors" class="list-anchor">#</a>
  
  發送網絡請求時是否忽略 HTTPS 錯誤。預設為 `false`。
- `proxy` [Dict] *(optional)*<a aria-hidden="true" tabIndex="-1" class="list-anchor-link" id="api-request-new-context-option-proxy"/><a href="#api-request-new-context-option-proxy" class="list-anchor">#</a>
  - `server` [str]
    
    用於所有請求的代理。支援 HTTP 和 SOCKS 代理，例如 `http://myproxy.com:3128` 或 `socks5://myproxy.com:3128`。簡短形式 `myproxy.com:3128` 被視為 HTTP 代理。
  - `bypass` [str] *(optional)*
    
    可選的逗號分隔域以繞過代理，例如 `".com, chromium.org, .domain.com"`。
  - `username` [str] *(optional)*
    
    如果 HTTP 代理需要身份驗證，可選的用戶名。
  - `password` [str] *(optional)*
    
    如果 HTTP 代理需要身份驗證，可選的密碼。
  
  網絡代理設置。
- `storage_state` [Union]\[[str], [pathlib.Path]\] | [Dict] *(optional)*<a aria-hidden="true" tabIndex="-1" class="list-anchor-link" id="api-request-new-context-option-storage-state"/><a href="#api-request-new-context-option-storage-state" class="list-anchor">#</a>
  - `cookies` [List]\[[Dict]\]
    - `name` [str]
      
      
    - `value` [str]
      
      
    - `domain` [str]
      
      
    - `path` [str]
      
      
    - `expires` [float]
      
      Unix 時間（以秒為單位）。
    - `httpOnly` [bool]
      
      
    - `secure` [bool]
      
      
    - `sameSite` "Strict" | "Lax" | "None"
      
      
    
  - `origins` [List]\[[Dict]\]
    - `origin` [str]
      
      
    - `localStorage` [List]\[[Dict]\]
      - `name` [str]
        
        
      - `value` [str]
        
        
      
    
  使用給定的存儲狀態填充上下文。此選項可用於使用通過 [browser_context.storage_state()](/api/class-browsercontext.mdx#browser-context-storage-state) 或 [api_request_context.storage_state()](/api/class-apirequestcontext.mdx#api-request-context-storage-state) 獲得的已登錄資訊初始化上下文。可以是保存的存儲文件的路徑，或 [browser_context.storage_state()](/api/class-browsercontext.mdx#browser-context-storage-state) 或 [api_request_context.storage_state()](/api/class-apirequestcontext.mdx#api-request-context-storage-state) 方法返回的值。
- `timeout` [float] *(optional)*<a aria-hidden="true" tabIndex="-1" class="list-anchor-link" id="api-request-new-context-option-timeout"/><a href="#api-request-new-context-option-timeout" class="list-anchor">#</a>
  
  等待回應的最大時間（以毫秒為單位）。預設為 `30000`（30 秒）。傳遞 `0` 以禁用超時。
- `user_agent` [str] *(optional)*<a aria-hidden="true" tabIndex="-1" class="list-anchor-link" id="api-request-new-context-option-user-agent"/><a href="#api-request-new-context-option-user-agent" class="list-anchor">#</a>
  
  在此上下文中使用的特定用戶代理。