- `action` [Func]&lt;[Task]&gt; <font size="2">新增於: v1.12</font><a aria-hidden="true" tabIndex="-1" class="list-anchor-link" id="frame-wait-for-navigation-option-action"/><a href="#frame-wait-for-navigation-option-action" class="list-anchor">#</a>

  觸發事件的動作。
- `options` `FrameRunAndWaitForNavigationOptions?` *(可選)*
  - `Timeout` [float]? *(可選)*<a aria-hidden="true" tabIndex="-1" class="list-anchor-link" id="frame-wait-for-navigation-option-timeout"/><a href="#frame-wait-for-navigation-option-timeout" class="list-anchor">#</a>

    最大操作時間（毫秒），預設為30秒，傳遞 `0` 以禁用超時。可以使用 [BrowserContext.SetDefaultNavigationTimeout()](/api/class-browsercontext.mdx#browser-context-set-default-navigation-timeout), [BrowserContext.SetDefaultTimeout()](/api/class-browsercontext.mdx#browser-context-set-default-timeout), [Page.SetDefaultNavigationTimeout()](/api/class-page.mdx#page-set-default-navigation-timeout) 或 [Page.SetDefaultTimeout()](/api/class-page.mdx#page-set-default-timeout) 方法更改預設值。
  - `Url|UrlRegex|UrlFunc` [string]? | [Regex]? | [Func]&lt;[string]?, bool&gt; *(可選)*<a aria-hidden="true" tabIndex="-1" class="list-anchor-link" id="frame-wait-for-navigation-option-url-url-regex-url-func"/><a href="#frame-wait-for-navigation-option-url-url-regex-url-func" class="list-anchor">#</a>

    接收 [URL] 的全域模式、正則表達式模式或謂詞，以在等待導航時匹配。請注意，如果參數是沒有通配符字符的字符串，該方法將等待導航到與字符串完全相等的 URL。
  - `WaitUntil` `enum WaitUntilState { Load, DOMContentLoaded, NetworkIdle, Commit }?` *(可選)*<a aria-hidden="true" tabIndex="-1" class="list-anchor-link" id="frame-wait-for-navigation-option-wait-until"/><a href="#frame-wait-for-navigation-option-wait-until" class="list-anchor">#</a>

    何時認為操作成功，預設為 `load`。事件可以是：
    * `'domcontentloaded'` - 當 `DOMContentLoaded` 事件被觸發時，認為操作已完成。
    * `'load'` - 當 `load` 事件被觸發時，認為操作已完成。
    * `'networkidle'` - **不推薦** 當至少 `500` 毫秒內沒有網絡連接時，認為操作已完成。不要將此方法用於測試，請依賴網頁斷言來評估就緒狀態。
    * `'commit'` - 當收到網絡響應並且文件開始加載時，認為操作已完成。